
plugins {
    id 'maven-publish'
    id 'net.neoforged.gradleutils'
    id 'net.neoforged.moddev'
    id 'io.github.goooler.shadow'
}

gradleutils {
    version {
        tags {
            includeFilter('10.0')
        }
        branches {
            suffixBranch()
            suffixExemptedBranch('main')
        }
    }
}

version = gradleutils.version.toString()

group = 'net.forgecraft.serverpacklocator'

sourceSets {
    utilmod
}

neoForge {
    version = project.neoforgeVersion
    accessTransformers.from("src/utilmod/resources/META-INF/accesstransformer.cfg")

    mods {
        spl {
            modSourceSets = [sourceSets.main]
        }
        utilmod {
            modSourceSets = [sourceSets.utilmod]
        }
    }

    runs {
        client {
            client()
            gameDirectory = file("runs/client")
            programArgument "--launch_target"
            programArgument "cpw.mods.bootstraplauncher.BootstrapLauncher"
            mainClass = "net.covers1624.devlogin.DevLogin"
        }
        server {
            server()
            gameDirectory = file("runs/server")
        }
    }
}

configurations {
    clientAdditionalRuntimeClasspath.extendsFrom shadow
    serverAdditionalRuntimeClasspath.extendsFrom shadow

    // The util-mod uses code from SPL
    utilmodCompileClasspath.extendsFrom compileClasspath
}

def jarUtilMod = tasks.register(sourceSets.utilmod.jarTaskName, Jar) {
    archiveClassifier = "utilmod"
    from(sourceSets.utilmod.output)
}

def copyUtilMod = tasks.register("copyUtilMod", Copy) {
    from(jarUtilMod)
    into(layout.buildDirectory.dir("generated/splUtilMod"))
    rename {
        // The shadow plugin says we should rename this to not have a .jar ending
        return "serverpacklocator-utilmod.embedded"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
}

jar.configure {
    archiveClassifier = "plain"
    manifest {
        attributes(
                'Automatic-Module-Name': 'serverpacklocator'
        )
    }
}

shadowJar {
    archiveClassifier = ""
    from(copyUtilMod)
    configurations = [project.configurations.shadow]
    relocate 'io.netty.handler.codec.http', 'net.forgecraft.serverpacklocator.shadow.io.netty.handler.codec.http'
    relocate 'io.netty.handler.codec.rtsp', 'net.forgecraft.serverpacklocator.shadow.io.netty.handler.codec.rtsp'
    relocate 'io.netty.handler.codec.spdy', 'net.forgecraft.serverpacklocator.shadow.io.netty.handler.codec.spdy'
    relocate 'com.electronwill.nightconfig.json', 'net.forgecraft.serverpacklocator.shadow.com.electronwill.nightconfig.json'
}

dependencies {
    shadow("io.netty:netty-codec-http:4.1.97.Final") {
        transitive = false
    }
    shadow("com.electronwill.night-config:json:3.6.4") {
        transitive = false
    }
    runtimeOnly "net.covers1624:DevLogin:0.1.0.4"

    utilmodCompileOnly sourceSets.main.output
    runtimeOnly sourceSets.utilmod.output
}

assemble.dependsOn shadowJar
